<?php

/**
 * @file
 * Applications functions.
 */

define('NOVO_APPLICATION_STATUS_VOC_NAME', 'application_status');

module_load_include("inc", "novo_applications", "includes/novo_applications.access");

/**
 * Implements hook_node_insert().
 */
function novo_applications_node_insert($node) {
  if (!isset($node->is_new) || !$node->is_new) {
    return;
  }
}

/**
 * Implements hook_node_update().
 */
function novo_applications_node_update($node) {
  if ($node->type == 'application') {

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function novo_applications_form_application_node_form_alter(&$form, &$form_state, $form_id) {
  $is_new = (isset($form['nid']['#value']) && !empty($form['nid']['#value'])) ? FALSE : TRUE;
  if ($is_new) {
    $nodes = novo_applications_get_app_node_for_user();
    if (!empty($nodes)) {
      // User already create application. Redirect.
      drupal_set_message(t("You already submit application"));
      drupal_goto("<front>");
    }
  }

  $form['#submit'][] = "novo_applications_form_submit";

  // kpr($form);
  $lang = isset($form['language']['#value']) ? $form['language']['#value'] : LANGUAGE_NONE;

  $form['field_app_7_final_agree_1'][$lang][0]['value']['#smart_description'] = FALSE;
  $form['field_app_7_final_agree_2'][$lang][0]['value']['#smart_description'] = FALSE;
  $form['field_app_7_final_agree_3'][$lang][0]['value']['#smart_description'] = FALSE;
  $form['field_app_7_final_agree_4'][$lang][0]['value']['#smart_description'] = FALSE;
  $form['field_app_7_final_agree_5'][$lang][0]['value']['#smart_description'] = FALSE;
  $form['field_app_7_final_agree_6'][$lang][0]['value']['#smart_description'] = FALSE;
  $form['field_app_7_final_agree_1'][$lang][0]['value']['#title_display'] = 'invisible';
  $form['field_app_7_final_agree_2'][$lang][0]['value']['#title_display'] = 'invisible';
  $form['field_app_7_final_agree_3'][$lang][0]['value']['#title_display'] = 'invisible';
  $form['field_app_7_final_agree_4'][$lang][0]['value']['#title_display'] = 'invisible';
  $form['field_app_7_final_agree_5'][$lang][0]['value']['#title_display'] = 'invisible';
  $form['field_app_7_final_agree_6'][$lang][0]['value']['#title_display'] = 'invisible';
  $form['field_masked_emergency_phone'][$lang][0]['value']['#attributes']['class'][] = 'form-control';

  $form['field_app7_statement_agree'][$lang][0]['value']['#smart_description'] = FALSE;
  $form['field_app7_statement_agree'][$lang][0]['value']['#title_display'] = 'invisible';
  $form['field_program_policies_agree'][$lang][0]['value']['#smart_description'] = FALSE;
  $form['field_program_policies_agree'][$lang][0]['value']['#title_display'] = 'invisible';

  $form['field_ref_1_how_long']['#element_validate'][] = '_custom_ref_how_long_field_validate';
  $form['field_ref_2_how_long']['#element_validate'][] = '_custom_ref_how_long_field_validate';
  $form['field_ref_3_how_long']['#element_validate'][] = '_custom_ref_how_long_field_validate';

  // Parent section.
  $node = (isset($form_state['node'])) ? $form_state['node'] : NULL;
  if ($node) {
    $dob = (isset($node->field_dob[$node->language][0]['value'])) ? $node->field_dob[$node->language][0]['value'] : NULL;
    if ($dob) {
      $dob_date = new DateTime();
      $dob_date->setTimestamp($dob);
      $today = new DateTime();
      $age = $today->diff($dob_date)->format("%y");
      if ($age >= 18) {
        _novo_application_hide_parent_section($form);
      }
    }
  }
}

/**
 * Node application form submit.
 */
function novo_applications_form_submit(&$form, &$form_state) {
  if (!user_access("disable auto complete")) {
    // Set completed field for node when multistep completed.
    $complete = isset($form_state['#multistep_complete']) ? ($form_state['#multistep_complete']) : FALSE;
    if ($complete) {
      $node = isset($form_state['node']) ? $form_state['node'] : NULL;
      $lang = isset($node->language) ? $node->language : LANGUAGE_NONE;
      $node_completed = isset($node->field_completed[$lang][0]['value']) ? ($node->field_completed[$lang][0]['value']) : FALSE;
      if (!$node_completed) {
        $node->field_completed[$lang][0]['value'] = 1;
        node_save($node);
        cache_clear_all("field:node:{$node->nid}", 'cache_field');
        drupal_set_message("Your application will begin processing now!");
        drupal_goto("<front>");
      }
    }
  }
}

/**
 * Hide parents section if age more 18.
 */
function _novo_application_hide_parent_section(&$form) {
  $form['field_parent_email']['#access'] = FALSE;
  $form['field_parent_guardian_first_name']['#access'] = FALSE;
  $form['field_parent_guardian_last_name']['#access'] = FALSE;
  $form['field_parent_phone']['#access'] = FALSE;
  $form['field_parent_prefix']['#access'] = FALSE;
}

/**
 * Get status tid by name.
 */
function novo_applications_get_status_tid($term_name) {
  $term = taxonomy_get_term_by_name($term_name, NOVO_APPLICATION_STATUS_VOC_NAME);
  $term = array_values($term);
  $term = isset($term[0]) ? $term[0] : -1;
  return (isset($term->tid)) ? $term->tid : NULL;
}

/**
 * Get application node for current user.
 */
function novo_applications_get_app_node_for_user($account = NULL) {
  global $user;
  $uid = (isset($account->uid)) ? $account->uid : $user->uid;
  $nodes = node_load_multiple(NULL, array(
    'uid' => $uid,
    'type' => 'application',
  ));
  return $nodes;
}

/**
 * Implements hook_theme().
 */
function novo_applications_theme() {
  return array(
    'novo_applications_welcome_block' => array(
      'render element' => 'data',
      'template' => 'plugins/templates/novo_applications_welcome_block',
    )
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function novo_applications_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' || $owner == 'panels') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Validate 'How do you know this reference?' fields, value should be minimum 6 months.
 */
function _custom_ref_how_long_field_validate($element, $form_state) {
  $lang = isset($form['language']['#value']) ? $form['language']['#value'] : LANGUAGE_NONE;
  $field_how_long_name = $element[$lang]['#field_name'];
  $field_how_long_period_name = $field_how_long_name . '_period';
  $field_how_long_period_value = isset($form_state['values'][$field_how_long_period_name][$lang]) ? $form_state['values'][$field_how_long_period_name][$lang] : NULL;

  if (!empty($field_how_long_period_value) && ($field_how_long_period_value == 'months')) {
    $field_how_long_value = isset($field_how_long_period_value) ? intval($element[$lang][0]['value']['#value']) : NULL;
    if (!empty($field_how_long_value) && ($field_how_long_value < 6)) {
      form_error($element, t('@field_name field should be minimum 6 months.', array('@field_name' => $element[$lang]['#title'])));
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function novo_applications_preprocess_node(&$variables) {
  // @codingStandardsIgnoreStart
//  if (isset($variables['node']) && isset($variables['view_mode']) && $variables['view_mode'] == "full" && $variables['type'] == 'application' && node_access("view", $variables['node'])) {
//    drupal_goto("<front>");
//  }
  // @codingStandardsIgnoreEnd
}

/**
 * Implements hook_permission().
 */
function novo_applications_permission() {
  return array(
    'edit application with any status' => array(
      'title' => t('Allow edit application with any status'),
      'description' => t('Allow edit application with any status: complete or not.'),
    ),
    'disable auto complete' => array(
      'title' => t('Disable auto complete'),
      'description' => t('Disable auto complete multistep (for admins).'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function novo_applications_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == "application" && $op == 'update' && !user_access("edit application with any status")) {

    // Disable edit access for volunteer for completed node.
    $lang = isset($node->language) ? $node->language : LANGUAGE_NONE;
    $node_completed = isset($node->field_completed[$lang][0]['value']) ? ($node->field_completed[$lang][0]['value']) : FALSE;

    return (!$node_completed && $node->uid == $account->uid) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}
