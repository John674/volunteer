<?php

/**
 * @file
 * Applications functions.
 */

define('NOVO_APPLICATION_STATUS_VOC_NAME', 'application_status');
define('NOVO_APPLICATION_STATUS_APPROVED_NAME', 'Approved');
define('NOVO_APPLICATION_STATUS_NOT_APPROVED_NAME', 'Not Approved');

define("NOVO_APPLICATION_SITES_VOC_NAME", "application_site");

module_load_include("inc", "novo_applications", "includes/novo_applications.func");
module_load_include("inc", "novo_applications", "includes/novo_applications.forms");

/**
 * Implements hook_menu().
 */
function novo_applications_menu() {
  $items = array();

  $items['novo-applications/update-status/%node/%'] = array(
    'title' => 'Update status',
    'page callback' => 'novo_application_update_status',
    'page arguments' => array(2, 3),
    'access arguments' => array('approve application'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function novo_applications_theme() {
  return array(
    'novo_applications_welcome_block' => array(
      'render element' => 'data',
      'template' => 'plugins/templates/novo_applications_welcome_block',
    )
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function novo_applications_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' || $owner == 'panels') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function novo_applications_preprocess_node(&$variables) {
  if (isset($variables['type']) && $variables['type'] == 'application') {
    // Application status.
    $app_status_tid = (isset($variables['field_app_status'][0]['tid'])) ? $variables['field_app_status'][0]['tid'] : NULL;
    $lang = isset($variables['language']) ? $variables['language'] : LANGUAGE_NONE;
    $app_completed = (isset($variables['field_completed'][$lang][0]['value'])) ? $variables['field_completed'][$lang][0]['value'] : FALSE;

    list($app_status_output, $app_status) = novo_application_get_status($app_completed, $app_status_tid);

    $variables['content']['app_status'] = array(
      "#markup" => $app_status_output,
    );

    // Approve/ not approve buttons.
    $approve_block = novo_application_prepare_approve_block($variables['nid'], $app_status, $app_completed);
    if ($approve_block) {
      $variables['content']['app_approve_block'] = array(
        "#markup" => $approve_block,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function novo_applications_permission() {
  return array(
    'edit application with any status' => array(
      'title' => t('Allow edit application with any status'),
      'description' => t('Allow edit application with any status: complete or not.'),
    ),
    'approve application' => array(
      'title' => t('Allow approve/not approve application'),
      'description' => t('Allow approve/not approve application.'),
    ),
    'disable auto complete' => array(
      'title' => t('Disable auto complete'),
      'description' => t('Disable auto complete multistep (for admins).'),
    ),
    'disable auto complete redirect' => array(
      'title' => t('Disable auto complete redirect'),
      'description' => t('Disable auto complete redirect (for admins).'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function novo_applications_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'novo_applications') . '/views',
  );
}

/**
 * Implements hook_node_access().
 */
function novo_applications_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == "application" && $op == 'update' && !user_access("edit application with any status")) {

    // Disable edit access for volunteer for completed node.
    $lang = isset($node->language) ? $node->language : LANGUAGE_NONE;
    $node_completed = isset($node->field_completed[$lang][0]['value']) ? $node->field_completed[$lang][0]['value'] : FALSE;
    $app_user_uid = isset($node->field_app_user[$lang][0]['value']) ? $node->field_app_user[$lang][0]['value'] : -1;

    return (!$node_completed && $app_user_uid == $account->uid) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}
