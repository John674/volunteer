<?php

/**
 * @file
 * Helper functions.
 */

module_load_include('inc', 'novo_cia', 'includes/novo_cia.constants');
module_load_include('inc', 'novo_cia', 'includes/novo_cia.db');
module_load_include('inc', 'novo_cia', 'includes/novo_cia.api');
module_load_include('inc', 'novo_cia', 'includes/novo_cia.func');

/**
 * Implements hook_views_api().
 */
function novo_cia_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'novo_cia') . '/views',
  );
}

/**
 * Implements hook_node_view().
 */
function novo_cia_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'application') {
    $cia_data = novo_cia_get_render_data($node->nid);
    if (!empty($cia_data)) {
      $node->content['pseudo_field_request_cia'] = array(
        '#type' => 'item',
        '#field_name' => 'pseudo_field_request_cia',
        '#theme' => 'pseudo_field__request_cia',
        '#cia_data' => $cia_data,
      );
    }

    $node->content['pseudo_field_request_date_cia'] = array(
      '#type' => 'item',
      '#field_name' => 'pseudo_field_request_date_cia',
      '#theme' => 'pseudo_field__date_cia',
      '#date_type' => t('Request date'),
      '#date' => novo_cia_date($node->nid, 'request_date'),
    );
    $node->content['pseudo_field_response_date_cia'] = array(
      '#type' => 'item',
      '#field_name' => 'pseudo_field_response_date_cia',
      '#theme' => 'pseudo_field__date_cia',
      '#date_type' => t('Response date'),
      '#date' => novo_cia_date($node->nid, 'response_date'),
    );
  }
}

/**
 * Implements hook_menu().
 */
function novo_cia_menu() {
  $items['novo-cia-request/send/%node'] = array(
    'title' => 'CIA Request',
    'page callback' => 'novo_cia_add_request_for_search',
    'page arguments' => array(2),
    'access arguments' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/novo-cia'] = array(
    'title' => 'CIA',
    'description' => 'Cia administration tools.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'right',
  );
  $items['admin/config/novo-cia/novo-cia-api-credentials'] = array(
    'title' => 'API credentials',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('novo_cia_api_credentials'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/novo_cia.admin.inc',
  );
  $items['novo-cia/view_report/%'] = array(
    'title' => 'CIA View Report',
    'page callback' => 'novo_cia_get_report_doc',
    'page arguments' => array(2),
    'access arguments' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function novo_cia_theme() {
  return array(
    'pseudo_field__request_cia' => array(
      'variables' => array('cia_data' => NULL),
      'template' => 'templates/novo-cia-pseudo-field--request-cia',
    ),

    'pseudo_field__date_cia' => array(
      'variables' => array('date' => NULL, 'date_type' => NULL),
      'template' => 'templates/novo-cia-pseudo-field-date',
    ),

    'novo_cia_request_by_ssn' => array(
      'variables' => array(
        'username' => NULL,
        'password' => NULL,
        'client_name' => NULL,
        'branch_name' => NULL,
        'client_contact' => NULL,
        'client_contact_email' => NULL,
        'first_name' => NULL,
        'middle_initial' => NULL,
        'last_name' => NULL,
        'alias_first_name' => NULL,
        'alias_last_name' => NULL,
        'suffix' => NULL,
        'address' => NULL,
        'city' => NULL,
        'state' => NULL,
        'zip_code' => NULL,
        'dob' => NULL,
        'ssn' => NULL,
        'ref_number' => NULL,
      ),
      'template' => 'templates/cia_xml/request_by_ssn',
    ),

    'novo_cia_request_by_address' => array(
      'variables' => array(
        'username' => NULL,
        'password' => NULL,
        'client_name' => NULL,
        'branch_name' => NULL,
        'client_contact' => NULL,
        'client_contact_email' => NULL,
        'first_name' => NULL,
        'middle_initial' => NULL,
        'last_name' => NULL,
        'alias_first_name' => NULL,
        'alias_last_name' => NULL,
        'suffix' => NULL,
        'address' => NULL,
        'city' => NULL,
        'state' => NULL,
        'zip_code' => NULL,
        'dob' => NULL,
        'ref_number' => NULL,
      ),
      'template' => 'templates/cia_xml/request_by_address',
    ),

    'novo_cia_query_report' => array(
      'variables' => array(
        'username' => NULL,
        'password' => NULL,
        'client_name' => NULL,
        'branch_name' => NULL,
        'client_contact' => NULL,
        'client_contact_email' => NULL,
        'tracking_number' => NULL,
      ),
      'template' => 'templates/cia_xml/query_report',
    ),

    'novo_cia_answer_report' => array(
      'variables' => array('params' => NULL),
      'template' => 'templates/email/novo-cia-answer-report',
    ),
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function novo_cia_cron_queue_info() {
  $queue['novo_cia_search_queue'] = array(
    'worker callback' => 'novo_cia_search_queue_worker',
    'time' => 60,
  );

  $queue['novo_cia_pull_report_queue'] = array(
    'worker callback' => 'novo_cia_pull_report_queue_worker',
    'time' => 60,
  );

  $queue['novo_cia_send_email_reviewer_queue'] = array(
    'worker callback' => 'novo_cia_send_email_reviewer_queue_worker',
    'time' => 60,
  );

  return $queue;
}

/**
 * Implements hook_cron().
 */
function novo_cia_cron() {
  $cron_last_search = variable_get(NOVO_CIA_CRON_LAST_SEARCH_REQUEST);
  $cron_last_pull_report = variable_get(NOVO_CIA_CRON_LAST_PULL_REPORT_REQUEST);

  if ((REQUEST_TIME - $cron_last_search) > NOVO_CIA_CRON_PERIOD_SEARCH_REQUEST) {
    $search_queue = DrupalQueue::get('novo_cia_search_queue');
    $pending_search_requests = novo_cia_get_pending_search_requests();
    foreach ($pending_search_requests as $request) {
      $search_queue->createItem(array('id' => $request->id));
    }
    variable_set(NOVO_CIA_CRON_LAST_SEARCH_REQUEST, REQUEST_TIME);
  }

  if ((REQUEST_TIME - $cron_last_pull_report) > NOVO_CIA_CRON_PERIOD_PULL_REPORT_REQUEST) {
    $pull_report_queue = DrupalQueue::get('novo_cia_pull_report_queue');
    $pending_pull_report_requests = novo_cia_get_pending_pull_report_requests();
    foreach ($pending_pull_report_requests as $request) {
      $pull_report_queue->createItem(array('id' => $request->id));
    }
    variable_set(NOVO_CIA_CRON_PERIOD_PULL_REPORT_REQUEST, REQUEST_TIME);
  }
}

/**
 * Send search request to CIA.
 */
function novo_cia_search_queue_worker($data) {
  $result = novo_cia_send_search_request($data['id']);
  if (!empty($result)) {
    watchdog("novo_cia", "Search request :id have error", array(
      ":id" => $data['id'],
    ), WATCHDOG_ERROR);
  }
}

/**
 * Send pull report request to CIA.
 */
function novo_cia_pull_report_queue_worker($data) {
  $result = novo_cia_send_pull_report_request($data['id']);
  if (!empty($result) && isset($result->report_status) && !empty($result->report_status)) {
    if (!empty($result) && isset($result->report_status) && !empty($result->report_status)) {
      $request_id = $result->id;
      $reviewers = novo_cia_get_user_by_role('Reviewer');
      $send_email_reviewer_queue = DrupalQueue::get('novo_cia_send_email_reviewer_queue');
      foreach ($reviewers as $reviewer) {
        $send_email_reviewer_queue->createItem(array(
          'uid' => $reviewer->uid,
          'request_id' => $request_id,
        ));
      }
    }
  }
  if (empty($result)) {
    watchdog("novo_cia", "Pull report request :id have error", array(
      ":id" => $data['id'],
    ), WATCHDOG_ERROR);
  }
}

/**
 * Send email to reviewer.
 */
function novo_cia_send_email_reviewer_queue_worker($data) {
  $result = novo_cia_send_email($data['uid'], $data['request_id']);
  if (empty($result)) {
    watchdog("novo_cia", "Can't send email :uid", array(
      ":uid" => $data['uid'],
    ), WATCHDOG_ERROR);
  }
}

/**
 * Add search request to CIA.
 */
function novo_cia_add_request_for_search($node) {
  if ($node->type == 'application') {
    $nid = $node->nid;
    $uid = $node->uid;
    if (isset($nid) && !empty($nid)) {
      $search_request_id = novo_cia_add_search_request_to_queue($nid, $uid);
      if (!empty($search_request_id)) {
        drupal_set_message(t("The request was added to the queue for sending to CIA."));
      }
      else {
        drupal_set_message(t("The request was`t be added to the queue for sending to CIA."), 'error');
      }
    }
  }
  else {
    drupal_set_message(t('Node type should be application'), 'error');
  }
  $url = $_GET['destination'] ? $_GET['destination'] : '<front>';
  drupal_goto($url);
}

/**
 * Get report document.
 */
function novo_cia_get_report_doc($nid) {
  $completed_pull_request = novo_cia_get_completed_pull_request($nid);
  $tracking_number = !empty($completed_pull_request) ? $completed_pull_request->tracking_number : NULL;
  if (!empty($tracking_number)) {
    $respond_html_report = novo_cia_pull_report_doc($tracking_number);
    print $respond_html_report;
  }
  else {
    drupal_set_message(t('Could`t get report.'), 'error');
    $url = $_GET['destination'] ? $_GET['destination'] : '<front>';
    drupal_goto($url);
  }

}

/**
 * Get request or response date for CIA.
 */
function novo_cia_date($nid = NULL, $date_type = NULL) {
  if (!empty($nid)) {
    $request = novo_cia_get_last_success_request($nid);
    return !empty($request->{$date_type}) && !empty($request->traking_number) ? format_date($request->{$date_type}, 'custom', 'Y-m-d  H:i:s') : 'N/A';
  }
  return NULL;
}

/**
 * Override drupal_http_request.
 */
if (function_exists("novo_cia_drupal_http_request")) {
  $url = '';
  $context = '';
  $response = novo_cia_drupal_http_request($url, array(
    'method' => 'GET',
    'max_redirects' => 5,
    'context' => $context,
  ));
}

/**
 * Performs an HTTP request with Coockies.
 */
function novo_cia_drupal_http_request($url, array $options = []) {
  // Allow an alternate HTTP client library to replace Drupal's default
  // implementation.
  $override_function = variable_get('drupal_http_request_function', FALSE);
  if (!empty($override_function) && function_exists($override_function)) {
    return $override_function($url, $options);
  }

  $result = new stdClass();

  // Parse the URL and make sure we can handle the schema.
  $uri = @parse_url($url);

  if ($uri == FALSE) {
    $result->error = 'unable to parse URL';
    $result->code = -1001;

    return $result;
  }

  if (!isset($uri['scheme'])) {
    $result->error = 'missing schema';
    $result->code = -1002;

    return $result;
  }

  timer_start(__FUNCTION__);

  // Set default context to enable/disable SSL verification.
  $default_context = stream_context_create([
    'ssl' => [
      'verify_peer' => FALSE,
      'verify_peer_name' => FALSE,
    ],
  ]);

  // Merge the default options.
  $options += [
    'headers' => array(),
    'method' => 'GET',
    'data' => NULL,
    'max_redirects' => 3,
    'timeout' => 30.0,
    'context' => $default_context,
  ];

  // Merge the default headers.
  $options['headers'] += [
    'User-Agent' => 'Drupal (+http://drupal.org/)',
  ];

  // stream_socket_client() requires timeout to be a float.
  $options['timeout'] = (float) $options['timeout'];

  // Use a proxy if one is defined and the host is not on the excluded list.
  $proxy_server = variable_get('proxy_server', '');
  if ($proxy_server && _drupal_http_use_proxy($uri['host'])) {
    // Set the scheme so we open a socket to the proxy server.
    $uri['scheme'] = 'proxy';
    // Set the path to be the full URL.
    $uri['path'] = $url;
    // Since the URL is passed as the path, we won't use the parsed query.
    unset($uri['query']);

    // Add in username and password to Proxy-Authorization header if needed.
    if ($proxy_username = variable_get('proxy_username', '')) {
      $proxy_password = variable_get('proxy_password', '');
      $options['headers']['Proxy-Authorization'] = 'Basic ' . base64_encode($proxy_username . (!empty($proxy_password) ? ":" . $proxy_password : ''));
    }
    // Some proxies reject requests with any User-Agent headers, while others
    // require a specific one.
    $proxy_user_agent = variable_get('proxy_user_agent', '');
    // The default value matches neither condition.
    if ($proxy_user_agent === NULL) {
      unset($options['headers']['User-Agent']);
    }
    elseif ($proxy_user_agent) {
      $options['headers']['User-Agent'] = $proxy_user_agent;
    }
  }

  switch ($uri['scheme']) {
    case 'proxy':
      // Make the socket connection to a proxy server.
      $socket = 'tcp://' . $proxy_server . ':' . variable_get('proxy_port', 8080);
      // The Host header still needs to match the real request.
      $options['headers']['Host'] = $uri['host'];
      $options['headers']['Host'] .= isset($uri['port']) && $uri['port'] != 80 ? ':' . $uri['port'] : '';
      break;

    case 'http':
    case 'feed':
      $port = isset($uri['port']) ? $uri['port'] : 80;
      $socket = 'tcp://' . $uri['host'] . ':' . $port;
      // RFC 2616: "non-standard ports MUST, default ports MAY be included".
      // We don't add the standard port to prevent from breaking rewrite rules
      // checking the host that do not take into account the port number.
      $options['headers']['Host'] = $uri['host'] . ($port != 80 ? ':' . $port : '');
      break;

    case 'https':
      // Note: Only works when PHP is compiled with OpenSSL support.
      $port = isset($uri['port']) ? $uri['port'] : 443;
      $socket = 'ssl://' . $uri['host'] . ':' . $port;
      $options['headers']['Host'] = $uri['host'] . ($port != 443 ? ':' . $port : '');
      break;

    default:
      $result->error = 'invalid schema ' . $uri['scheme'];
      $result->code = -1003;

      return $result;
  }

  if (empty($options['context'])) {
    $fp = @stream_socket_client($socket, $errno, $errstr, $options['timeout']);
  }
  else {
    // Create a stream with context. Allows verification of a SSL certificate.
    $fp = @stream_socket_client($socket, $errno, $errstr, $options['timeout'], STREAM_CLIENT_CONNECT, $options['context']);
  }

  // Make sure the socket opened properly.
  if (!$fp) {
    // When a network error occurs, we use a negative number so it does not
    // clash with the HTTP status codes.
    $result->code = -$errno;
    $result->error = trim($errstr) ? trim($errstr) : t('Error opening socket @socket', ['@socket' => $socket]);

    // Mark that this request failed. This will trigger a check of the web
    // server's ability to make outgoing HTTP requests the next time that
    // requirements checking is performed.
    // See system_requirements().
    variable_set('drupal_http_request_fails', TRUE);

    return $result;
  }

  // Construct the path to act on.
  $path = isset($uri['path']) ? $uri['path'] : '/';
  if (isset($uri['query'])) {
    $path .= '?' . $uri['query'];
  }

  // Only add Content-Length if we actually have any content or if it is a POST
  // or PUT request. Some non-standard servers get confused by Content-Length in
  // at least HEAD/GET requests, and Squid always requires Content-Length in
  // POST/PUT requests.
  $content_length = strlen($options['data']);
  if ($content_length > 0 || $options['method'] == 'POST' || $options['method'] == 'PUT') {
    $options['headers']['Content-Length'] = $content_length;
  }

  // If the server URL has a user then attempt to use basic authentication.
  if (isset($uri['user'])) {
    $options['headers']['Authorization'] = 'Basic ' . base64_encode($uri['user'] . (isset($uri['pass']) ? ':' . $uri['pass'] : ':'));
  }

  // If the database prefix is being used by SimpleTest to run the tests in a copied
  // database then set the user-agent header to the database prefix so that any
  // calls to other Drupal pages will run the SimpleTest prefixed database. The
  // user-agent is used to ensure that multiple testing sessions running at the
  // same time won't interfere with each other as they would if the database
  // prefix were stored statically in a file or database variable.
  $test_info = &$GLOBALS['drupal_test_info'];
  if (!empty($test_info['test_run_id'])) {
    $options['headers']['User-Agent'] = drupal_generate_test_ua($test_info['test_run_id']);
  }

  $request = $options['method'] . ' ' . $path . " HTTP/1.0\r\n";
  foreach ($options['headers'] as $name => $value) {
    $request .= $name . ': ' . trim($value) . "\r\n";
  }
  $request .= "\r\n" . $options['data'];
  $result->request = $request;
  // Calculate how much time is left of the original timeout value.
  $timeout = $options['timeout'] - timer_read(__FUNCTION__) / 1000;
  if ($timeout > 0) {
    stream_set_timeout($fp, floor($timeout), floor(1000000 * fmod($timeout, 1)));
    fwrite($fp, $request);
  }

  // Fetch response. Due to PHP bugs like http://bugs.php.net/bug.php?id=43782
  // and http://bugs.php.net/bug.php?id=46049 we can't rely on feof(), but
  // instead must invoke stream_get_meta_data() each iteration.
  $info = stream_get_meta_data($fp);
  $alive = !$info['eof'] && !$info['timed_out'];
  $response = '';

  while ($alive) {
    // Calculate how much time is left of the original timeout value.
    $timeout = $options['timeout'] - timer_read(__FUNCTION__) / 1000;
    if ($timeout <= 0) {
      $info['timed_out'] = TRUE;
      break;
    }
    stream_set_timeout($fp, floor($timeout), floor(1000000 * fmod($timeout, 1)));
    $chunk = fread($fp, 1024);
    $response .= $chunk;
    $info = stream_get_meta_data($fp);
    $alive = !$info['eof'] && !$info['timed_out'] && $chunk;
  }
  fclose($fp);

  if ($info['timed_out']) {
    $result->code = HTTP_REQUEST_TIMEOUT;
    $result->error = 'request timed out';

    return $result;
  }
  // Parse response headers from the response body.
  // Be tolerant of malformed HTTP responses that separate header and body with
  // \n\n or \r\r instead of \r\n\r\n.
  list($response, $result->data) = preg_split("/\r\n\r\n|\n\n|\r\r/", $response, 2);
  $response = preg_split("/\r\n|\n|\r/", $response);

  // Parse the response status line.
  $response_status_array = _drupal_parse_response_status(trim(array_shift($response)));
  $result->protocol = $response_status_array['http_version'];
  $result->status_message = $response_status_array['reason_phrase'];
  $code = $response_status_array['response_code'];

  $result->headers = [];

  // Parse the response headers.
  while ($line = trim(array_shift($response))) {
    list($name, $value) = explode(':', $line, 2);
    $name = strtolower($name);
    if (isset($result->headers[$name]) && $name == 'set-cookie') {
      // RFC 2109: the Set-Cookie response header comprises the token Set-
      // Cookie:, followed by a comma-separated list of one or more cookies.
      $result->headers[$name] .= ',' . trim($value);
    }
    else {
      $result->headers[$name] = trim($value);
    }
  }

  $responses = [
    100 => 'Continue',
    101 => 'Switching Protocols',
    200 => 'OK',
    201 => 'Created',
    202 => 'Accepted',
    203 => 'Non-Authoritative Information',
    204 => 'No Content',
    205 => 'Reset Content',
    206 => 'Partial Content',
    300 => 'Multiple Choices',
    301 => 'Moved Permanently',
    302 => 'Found',
    303 => 'See Other',
    304 => 'Not Modified',
    305 => 'Use Proxy',
    307 => 'Temporary Redirect',
    400 => 'Bad Request',
    401 => 'Unauthorized',
    402 => 'Payment Required',
    403 => 'Forbidden',
    404 => 'Not Found',
    405 => 'Method Not Allowed',
    406 => 'Not Acceptable',
    407 => 'Proxy Authentication Required',
    408 => 'Request Time-out',
    409 => 'Conflict',
    410 => 'Gone',
    411 => 'Length Required',
    412 => 'Precondition Failed',
    413 => 'Request Entity Too Large',
    414 => 'Request-URI Too Large',
    415 => 'Unsupported Media Type',
    416 => 'Requested range not satisfiable',
    417 => 'Expectation Failed',
    500 => 'Internal Server Error',
    501 => 'Not Implemented',
    502 => 'Bad Gateway',
    503 => 'Service Unavailable',
    504 => 'Gateway Time-out',
    505 => 'HTTP Version not supported',
  ];
  // RFC 2616 states that all unknown HTTP codes must be treated the same as the
  // base code in their class.
  if (!isset($responses[$code])) {
    $code = floor($code / 100) * 100;
  }
  $result->code = $code;

  switch ($code) {
    case 200:
    case 304:

      break;

    case 301:
    case 302:
    case 307:
      $location = $result->headers['location'];
      $options['timeout'] -= timer_read(__FUNCTION__) / 1000;
      if ($options['timeout'] <= 0) {
        $result->code = HTTP_REQUEST_TIMEOUT;
        $result->error = 'request timed out';
      }
      elseif ($options['max_redirects']) {
        // Redirect to the new location.
        $options['max_redirects']--;

        if (isset($result->headers['set-cookie']) && !empty($result->headers['set-cookie'])) {
          $options['headers']['Cookie'] = $result->headers['set-cookie'];
        }
        $result = novo_cia_drupal_http_request($location, $options);
        $result->redirect_code = $code;
      }
      if (!isset($result->redirect_url)) {
        $result->redirect_url = $location;
      }

      break;

    default:
      $result->error = $result->status_message;
  }

  return $result;
}

/**
 * Implements hook_mail().
 */
function novo_cia_mail($key, &$message, $params) {
  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'multipart/mixed;';
  $message['headers']['Content-Type'] = 'text/html;';

  switch ($key) {
    case 'answer_report':
      $html_email = theme("novo_cia_answer_report", array('params' => $params));
      $message['subject'] = t("Volunteer reviewed by CIA");
      $message['from'] = NOVO_CIA_BASE_EMAIL;
      $message['body'][] = $html_email;
      $a = 1;
      break;
  }
}

/**
 * Send email to referral.
 */
function novo_cia_send_email($uid = NULL, $request_id = NULL) {
  if (!empty($uid) && !empty($request_id)) {
    $request = novo_cia_get_request($request_id);
    if ($request->request_type != 1 && $request->request_status != 1 && empty($request->tracking_number)) {
      return NULL;
    }
    $reviewer_first_name = '';
    $reviewer_last_name = '';

    $nid = $request->application_nid;
    $reviewer = user_load($uid);
    $wrapper = entity_metadata_wrapper('user', $reviewer);

    if (isset($wrapper->field_u_first_name)) {
      $reviewer_first_name = $wrapper->field_u_first_name->value();
    }

    if (isset($wrapper->field_u_last_name)) {
      $reviewer_last_name = $wrapper->field_u_last_name->value();
    }

    $volunteer_link = url('application/' . $nid, array('absolute' => TRUE));
    $report_status = $request->report_status;
    $volunteer = node_load($nid);

    $data = array(
      'reviewer_name' => $reviewer_first_name . ' ' . $reviewer_last_name,
      'vol_name' => $volunteer->title,
      'vol_link' => $volunteer_link,
    );

    if ($report_status == 1 || $report_status == 3) {
      $data['cia_answer'] = 'positive';
    }

    if ($report_status == 2) {
      $data['cia_answer'] = 'negative';
    }

    return drupal_mail('novo_cia', 'answer_report', $reviewer->mail, language_default(), $data);
  }
  return NULL;
}
