<?php

/**
 * @file
 * All hook_update()'s.
 */

/**
 * Implements hook_install().
 */
function novo_master_install() {
  // Enable modules.
  $module_list = array(
    'menu',
    'better_exposed_filters',
    'field_collection',
    'field_group',
    'panels',
    'views',
    'views_data_export',
    'strongarm',
    'list',
    'novo_master_feature',
  );

  module_enable($module_list);

  db_update('system')
    ->fields(array('weight' => 10))
    ->condition('name', 'novo_master', '=')
    ->execute();
}

/**
 * Rebuild novo_taxonomy_feature and novo_content_feature.
 */
function novo_master_update_7101() {
  features_revert_module("novo_taxonomy_feature");
  features_revert_module("novo_content_feature");
}

/**
 * Rebuild novo_content_feature.
 */
function novo_master_update_7102() {
  features_revert_module("novo_content_feature");
}

/**
 * Rebuild novo_content_feature.
 */
function novo_master_update_7103() {
  features_revert_module("novo_content_feature");
}

/**
 * Rebuild novo_content_feature and novo_content_feature, disable telephone.
 */
function novo_master_update_7104() {
  features_revert_module("novo_taxonomy_feature");
  features_revert_module("novo_content_feature");
  features_revert_module("novo_roles_permissions_feature");

  // Disable modules.
  $disable_module_list = array(
    'telephone',
  );

  module_disable($disable_module_list);
}

/**
 * Enable Email.
 */
function novo_master_update_7105() {
  features_revert_module("novo_content_feature");

  // Enable modules.
  $enable_module_list = array(
    'email',
  );

  module_enable($enable_module_list);
}

/**
 * Enable Email.
 */
function novo_master_update_7106() {
  // Enable modules.
  $enable_module_list = array(
    'email',
  );
  module_enable($enable_module_list);
  features_revert_module("novo_content_feature");

}

/**
 * Rebuild novo_content_feature.
 */
function novo_master_update_7107() {
  features_revert_module("novo_content_feature");
}

/**
 * Rebuild novo_content_feature and enable phone.
 */
function novo_master_update_7108() {
  // Enable modules.
  module_enable(array('phone'));
  features_revert_module("novo_content_feature");
}

/**
 * Enable novo_master_feature.
 */
function novo_master_update_7109() {
  module_enable(array('novo_master_feature'));
}

/**
 * Revert novo_taxonomy_feature and novo_content_feature.
 */
function novo_master_update_7110() {
  module_enable(array('novo_taxonomy_feature'));
  module_enable(array('novo_views_feature'));
  module_enable(array('novo_content_feature'));
}

/**
 * Enable contextual.
 */
function novo_master_update_7111() {
  module_enable(array('contextual'));
}

/**
 * Revert novo_master_feature,novo_roles_permissions_feature,novo_views_feature.
 */
function novo_master_update_7112() {
  module_enable(array('novo_master_feature'));
  module_enable(array('novo_roles_permissions_feature'));
  module_enable(array('novo_views_feature'));
}

/**
 * Remove old phone fields.
 */
function novo_master_update_7113() {
  field_delete_field('field_primary_phone_1');
  field_delete_field('field_primary_phone_2');
  field_delete_field('field_secondary_phone_1');
  field_delete_field('field_secondary_phone_2');
  field_delete_field('field_parent_guardian_phone_1');
  field_delete_field('field_parent_guardian_phone_2');
  field_delete_field('field_emergency_phone');
  field_purge_batch(1);
  module_disable(array('telephone'));
  features_revert_module("novo_master_feature");
  features_revert_module("novo_content_feature");
  features_revert_module("novo_roles_permissions_feature");
  features_revert_module("novo_views_feature");
}

/**
 * Revert novo_master_feature.
 */
function novo_master_update_7114() {
  module_enable(array('novo_master_feature'));
}

/**
 * Revert novo_content_feature.
 */
function novo_master_update_7115() {
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_content_feature.
 */
function novo_master_update_7116() {
  features_revert_module("novo_content_feature");
  features_revert_module("novo_master_feature");
}

/**
 * Revert novo_content_feature.
 */
function novo_master_update_7117() {
  features_revert_module('novo_content_feature');
}

/**
 * Revert novo_content_feature.
 */
function novo_master_update_7118() {
  features_revert_module('novo_content_feature');
}

/**
 * Remove old phone fields.
 */
function novo_master_update_7119() {
  features_revert_module("novo_panels_feature");
  features_revert_module("novo_taxonomy_feature");
  features_revert_module("novo_master_feature");
  features_revert_module("novo_content_feature");
  module_disable(array('phone'));
  field_delete_field('field_masked_phone_1');
  field_delete_field('field_masked_phone_2');
  field_delete_field('field_masked_phone_3');
  field_delete_field('field_masked_phone_4');
  field_delete_field('field_ref_1_phone_1');
  field_delete_field('field_ref_1_phone_2');
  field_delete_field('field_ref_2_phone_1');
  field_delete_field('field_ref_2_phone_2');
  field_delete_field('field_ref_3_phone_1');
  field_delete_field('field_ref_3_phone_2');
  field_delete_field('field_church_phone_1');
  field_delete_field('field_church_phone_2');
  field_purge_batch(1);
}

/**
 * Remove old field_school_year fields.
 */
function novo_master_update_7120() {
  features_revert_module("novo_roles_permissions_feature");
  features_revert_module("novo_content_feature");
  features_revert_module("novo_views_feature");
  field_delete_field('field_school_year');
  field_purge_batch(1);
}

/**
 * Update field_u_birthday.
 */
function novo_master_update_7121() {
  field_delete_field('field_u_birthday');
  field_purge_batch(1);
  features_revert_module("novo_content_feature");
  features_revert_module("novo_account_feature");
  features_revert_module("novo_views_feature");
  features_revert_module("novo_master_feature");
}

/**
 * Update field_u_birthday.
 */
function novo_master_update_7122() {
  field_delete_field('field_primary_contact_first_name');
  field_delete_field('field_primary_contact_last_name');
  field_delete_field('field_secondary_first_name');
  field_delete_field('field_secondary_last_name');
  field_purge_batch(1);
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_views_feature.
 */
function novo_master_update_7123() {
  features_revert_module("novo_views_feature");
}

/**
 * Revert novo_content_feature, novo_views_feature.
 */
function novo_master_update_7124() {
  field_delete_field('field_what_site_want');
  field_delete_field('field_middle');
  field_purge_batch(1);
  features_revert_module("novo_views_feature");
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_content_feature.
 */
function novo_master_update_7125() {
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_content_feature, remove fields.
 */
function novo_master_update_7126() {
  field_delete_field('field_program_staff_list');
  field_delete_field('field_program_volunteers_list');
  field_purge_batch(1);
  features_revert_module("novo_taxonomy_feature");
  features_revert_module("novo_content_feature");
  module_disable(array("select2widget"));
}

/**
 * Revert novo_content_feature, novo_views_feature.
 */
function novo_master_update_7127() {
  features_revert_module("novo_views_feature");
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_content_feature, novo_taxonomy_feature.
 */
function novo_master_update_7128() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('application_status');
  $list = array(
    'Approved',
    'Not Approved',
  );
  if (!empty($vocabulary) && isset($vocabulary->vid)) {
    $taxonomy_tree = taxonomy_get_tree($vocabulary->vid);
    if (is_array($taxonomy_tree)) {

      // Delete old terms.
      foreach ($taxonomy_tree as $term) {
        taxonomy_term_delete($term->tid);
      }

      // Create new terms.
      foreach ($list as $key => $value) {
        $term = new stdClass();
        $term->name = $value;
        $term->vid = $vocabulary->vid;
        taxonomy_term_save($term);
      }
    }
  }

  features_revert_module("novo_taxonomy_feature");
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_content_feature.
 */
function novo_master_update_7129() {
  db_update('system')
    ->fields(array('weight' => 10))
    ->condition('name', 'novo_master', '=')
    ->execute();

  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_content_feature, novo_views_feature.
 */
function novo_master_update_7130() {
  // Enable modules.
  $enable_module_list = array(
    'novo_mentors',
    'ddf',
    'ddf_entityreference',
  );
  module_enable($enable_module_list);
  field_delete_field('field_parent_email');
  field_purge_batch(1);
  features_revert_module("novo_views_feature");
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_content_feature, novo_views_feature. Enable conditional_fields.
 */
function novo_master_update_7131() {
  module_enable(array("conditional_fields"));
  if (module_exists('novo_mentors')) {
    module_disable(array("novo_mentors"));
    drupal_uninstall_modules(array('novo_mentors'));
  }
  features_revert_module("novo_views_feature");
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_content_feature.
 */
function novo_master_update_7132() {
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_content_feature and delete field_parent_email_u.
 */
function novo_master_update_7133() {
  field_delete_field('field_parent_email_u');
  field_purge_batch(1);
  features_revert_module("novo_content_feature");
}

/**
 * Revert novo_master_feature -> added smtp mail and mailsystem.
 */
function novo_master_update_7134() {
  features_revert_module("novo_master_feature");
}

/**
 * Revert novo_content_feature.
 */
function novo_master_update_7135() {
  features_revert_module("novo_content_feature");
}

/**
 * Remove field_program_staff_list and field_program_volunteers_list from program.
 */
function novo_master_update_7136() {
  field_delete_field('field_program_staff_list');
  field_delete_field('field_program_volunteers_list ');
  field_delete_field('field_active_inactive ');
  field_purge_batch(1);
  features_revert_module("novo_content_feature");
  features_revert_module("novo_views_feature");
}

/**
 * Revert novo_content_feature.
 */
function novo_master_update_7137() {
  features_revert_module("novo_content_feature");
}

/**
 * Remove old fields.
 */
function novo_master_update_7138() {
  field_delete_field('field_middle');
  field_purge_batch(1);
  features_revert_module("novo_content_feature");
  features_revert_module("novo_menu_feature");
  features_revert_module("novo_views_feature");
  features_revert_module("novo_roles_permissions_featuKre");
}

/**
 * Revert novo_block_feature and enable webform_ajax.
 */
function novo_master_update_7139() {
  module_enable(array("webform_ajax"));
  features_revert_module("novo_block_feature");
}

/**
 * Remove old fields.
 */
function novo_master_update_7140() {
  field_delete_field('field_class_school_year');
  field_delete_field('field_program_school_year');
  field_purge_batch(1);
}

/**
 * Remove application_site voc.
 */
function novo_master_update_7141() {
  $voc = taxonomy_vocabulary_machine_name_load("application_site");
  if (isset($voc->vid)) {
    taxonomy_vocabulary_delete($voc->vid);
  }
}

/**
 * Revert novo_views_feature.
 */
function novo_master_update_7142() {
  features_revert_module("novo_views_feature");
}

/**
 * Revert novo_views_feature.
 */
function novo_master_update_7143() {
  features_revert_module("novo_views_feature");
}

/**
 * Revert novo_views_feature.
 */
function novo_master_update_7144() {
  features_revert_module("novo_views_feature");
}

/**
 * Ask to rebuild access.
 */
function novo_master_update_7145() {
  node_access_needs_rebuild(TRUE);
}

/**
 * Revert novo_views_feature, novo_master_feature, delete old field_decision_other_explained.
 */
function novo_master_update_7146() {
  field_delete_field('field_decision_other_explained');
  features_revert_module("novo_views_feature");
  features_revert_module("novo_master_feature");
}

/**
 * Revert novo_views_feature, novo_master_feature, delete old field_decision_other_explained.
 */
function novo_master_update_7147() {
  field_delete_field('field_decision_other_explained');
}

/**
 * Delete field_responded.
 */
function novo_master_update_7148() {
  field_delete_field('field_responded');
  field_purge_batch(1);
}

/**
 * Revert novo_views_feature, novo_block_feature, novo_content_strongarm_feature.
 */
function novo_master_update_7149() {
  features_revert_module("novo_views_feature");
  features_revert_module("novo_block_feature");
  features_revert_module("novo_content_strongarm_feature");
}

/**
 * Rebuild novo_taxonomy_feature and novo_content_feature.
 */
function novo_master_update_7150() {
  features_revert_module("novo_content_feature");
}

/**
 * Delete field_attend_church_regularly.
 */
function novo_master_update_7151() {
  field_delete_field('field_attend_church_regularly');
  field_purge_batch(1);
}

/**
 * Revert novo_views_feature.
 */
function novo_master_update_7152() {
  features_revert_module('novo_views_feature');
}

/**
 * Revert novo_content_feature and novo_views_feature features.
 */
function novo_master_update_7153() {
  features_revert_module("novo_content_feature");
  features_revert_module("novo_views_feature");
}

/**
 * Delete "goes by" value if it equal to "first name".
 */
function novo_master_update_7154(&$sandbox) {

  if (!isset($sandbox['total'])) {
    $result = db_select('node', 'n')
      ->fields('n', ['nid'])
      ->condition('type', 'application')
      ->execute();
    $sandbox['total'] = $result->rowCount();
    $sandbox['current'] = 0;
  }
  $nodes_per_pass = 10;

  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'application')
    ->orderBy('n.nid')
    ->range($sandbox['current'], $nodes_per_pass)
    ->execute();

  foreach ($result as $row) {
    $node = node_load($row->nid);
    $first_name_field = reset(field_get_items('node', $node, 'field_first_name'));
    $goes_by_name_field = reset(field_get_items('node', $node, 'field_goes_by'));

    $first_name = strtolower(trim($first_name_field['value']));
    $goes_by_name = strtolower(trim($goes_by_name_field['value']));
    if ($first_name == $goes_by_name) {
      $lang = $lang = isset($node->language) ? $node->language : LANGUAGE_NONE;
      $node->field_goes_by[$lang][0]['value'] = '';
      node_save($node);
    }
    $sandbox['current']++;
  }
  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);

  if ($sandbox['#finished'] === 1) {
    drupal_set_message(t('Nodes @nodes were updated. DONE!!!', array('@nodes' => $sandbox['total'])));
  }
}

/**
 * Change apostrophe \’ to \' in name fields.
 */
function novo_master_update_7155(&$sandbox) {

  if (!isset($sandbox['total'])) {
    $result = db_select('node', 'n')
      ->fields('n', ['nid'])
      ->condition('type', 'kids')
      ->execute();
    $sandbox['total'] = $result->rowCount();
    $sandbox['current'] = 0;
  }
  $nodes_per_pass = 10;

  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'kids')
    ->orderBy('n.nid')
    ->range($sandbox['current'], $nodes_per_pass)
    ->execute();

  foreach ($result as $row) {
    $node = node_load($row->nid);
    $name_fields = [
      'field_first_name',
      'field_last_name',
      'field_goes_by',
      'field_middle_name',
    ];
    foreach ($name_fields as $field) {
      if (isset($node->{$field})) {
        $name_field = reset(field_get_items('node', $node, $field));
        $name = strtolower(trim($name_field['value']));
        if (strpos($name, '’') !== FALSE) {
          $lang = isset($node->language) ? $node->language : LANGUAGE_NONE;
          $node->{$field}[$lang][0]['value'] = str_replace('’', '\'', $name);
          node_save($node);
        }
      }
    }
    if ((strpos($node->title, '’') !== FALSE)) {
      $node->title = str_replace('’', '\'', $node->title);
    }
    node_save($node);
    $sandbox['current']++;
  }
  $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);

  if ($sandbox['#finished'] === 1) {
    drupal_set_message(t('Kids @nodes were updated. DONE!!!', array('@nodes' => $sandbox['total'])));
  }
}
