<?php

/**
 * @file
 * Helper functions.
 */

define("NOVO_MASTER_NOT_VIEW_DISPLAY_CONTENT_TYPES", serialize(array(
  'program',
  'kids',
  'attendance',
  'locations',
  'mentors',
  'partner',
  'staff',
  'class'
)));

define("NOVO_MASTER_ADD_BUTTON_VIEW_NAMES", serialize(array(
  'kids',
  'attendance',
  'locations',
  'partners',
  'programs',
  'staff',
  'volunteers',
  'mentors',
  'class',
  'list_kids_mentored'
)));

define("NOVO_MASTER_VOLUNTEER_ROLE_MANE", 'Applicant US citizen');

/**
 * Preprocess page.
 */
function novo_master_preprocess_page(&$vars) {
  // Set breadcrumbs.
  if (in_array("page__list_kids_mentored", $vars['theme_hook_suggestions'])) {
    $vol_nid = isset($vars['page']['#views_contextual_links_info']['views_ui']['view']->exposed_data['field_volunteer_mentor_name_target_id'][0]['target_id']) ? $vars['page']['#views_contextual_links_info']['views_ui']['view']->exposed_data['field_volunteer_mentor_name_target_id'][0]['target_id'] : NULL;
    $vol_node = node_load($vol_nid);
    if ($vol_node) {
      $b = drupal_get_breadcrumb();
      $b[] = l($vol_node->title, "node/" . $vol_node->nid);
      drupal_set_breadcrumb($b);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function novo_master_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['actions']['publish']['#value'])) {
    if ($form['actions']['publish']['#value'] == "Publish") {
      $form['actions']['publish']['#value'] = t("Active");
    }
    else {
      $form['actions']['publish']['#value'] = t("Not active");
    }
  }

  if ($form_id == "kids_node_form") {
    // Validate Date of Birth.
    if (function_exists("novo_master_dob_validate")) {
      $form['field_dob'][LANGUAGE_NONE][0]['#element_validate'][] = "novo_master_dob_validate";
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function novo_master_menu_alter(&$items) {
  $items['node/%node/view']['access callback'] = 'novo_master_disable_node_view';
  $items['node/%node/view']['access arguments'] = array(1);

  $items['user']['access callback'] = 'novo_master_disable_user_view';

  $items['node/add']['access callback'] = 'novo_master_disable_node_add_page';
}

/**
 * Access node view tab callback.
 */
function novo_master_disable_node_view($node) {
  $now_view_content_types = unserialize(NOVO_MASTER_NOT_VIEW_DISPLAY_CONTENT_TYPES);
  if (in_array($node->type, $now_view_content_types)) {
    return FALSE;
  }

  if ($node->type == 'reference_request' && function_exists("novo_ref_request_check_hash_access")) {
    $access = novo_ref_request_check_hash_access($node);
    if ($access) {
      return $access;
    }
  }

  return user_access('access content');
}

/**
 * Access to node/add page.
 */
function novo_master_disable_node_add_page() {
  global $user;

  return ($user->uid == 1) ? TRUE : FALSE;
}

/**
 * Disable user view link for volunteers.
 */
function novo_master_disable_user_view() {
  if (user_is_anonymous()) {
    return TRUE;
  }
  $role = user_role_load_by_name(NOVO_MASTER_VOLUNTEER_ROLE_MANE);
  if (user_has_role($role->rid)) {
    return FALSE;
  }
  return user_access('access user profiles');
}

/**
 * Implements hook_preprocess_node().
 */
function novo_master_preprocess_node($variables) {
  $now_view_content_types = unserialize(NOVO_MASTER_NOT_VIEW_DISPLAY_CONTENT_TYPES);
  if (in_array($variables['type'], $now_view_content_types)) {
    if (
      isset($variables['node']) &&
      isset($variables['view_mode']) &&
      $variables['view_mode'] == "full" &&
      node_access("update", $variables['node'])
    ) {
      drupal_goto("node/" . $variables['nid'] . "/edit");
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function novo_master_preprocess_views_view(&$vars) {
  // Add "Add +" buttons to views.
  $view_names = unserialize(NOVO_MASTER_ADD_BUTTON_VIEW_NAMES);
  if (isset($vars['name']) && isset($vars['display_id']) && in_array($vars['name'], $view_names) && $vars['display_id'] == 'page') {
    $type = (isset($vars['view']->filter['type']->value)) ? $vars['view']->filter['type']->value : array();
    $type = reset($type);
    if (!empty($type)) {
      $icon = '<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>';

      switch ($vars['name']) {
        case "volunteers":
          $add_link = "admin/people/create";
          $destination = array("destination" => "users");
          break;

        case "list_kids_mentored":
          $add_link = "/node/add/mentors";
          $destination = drupal_get_destination();
          break;

        default:
          $add_link = "node/add/" . $type;
          $destination = drupal_get_destination();
      }

      $btn = l(t("Add !icon", array("!icon" => $icon)), $add_link, array(
        "query" => $destination,
        "html" => TRUE,
        "attributes" => array(
          "class" => array(
            "btn",
            "btn-primary",
            "btn-sm",
            "novo-entity-add-btn"
          )
        )
      ));

      $vars['attachment_before'] .= $btn;
      $vars['attachment_after'] .= $btn;
    }
  }
}

/**
 * Implements hook_ddf_handle_args_alter().
 */
function novo_master_ddf_handle_args_alter(&$value, &$column, $field) {

}

/**
 * Implements hook_menu_position_rule_alter().
 */
function novo_master_menu_position_rule_alter(&$rule, array &$context, &$rule_matches, &$set_breadcrumb) {
  switch ($rule->machine_name) {
    case "programms_menu_active":
      $content_types = array(
        "attendance",
        "program",
        "class",
        "mentors",
        "locations"
      );
      $paths = array(
        "node/add/attendance",
        "node/add/program",
        "node/add/class",
        "node/add/mentors",
        "node/add/locations",
        "locations",
        "programs",
        "mentors",
        "class",
      );

      $rule_matches = novo_master_menu_position_rule_rules($context, $content_types, $paths);
      break;

    case "attendance_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("attendance"), array("node/add/attendance"));
      break;

    case "program_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("program"), array("node/add/program"));
      break;

    case "class_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("class"), array("node/add/class"));
      break;

    case "mentors_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("mentors"), array("node/add/mentors"));
      break;

    case "locations_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("locations"), array("node/add/locations"));
      break;

    case "kids_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("kids"), array("node/add/kids"));
      break;

    case "staff_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("staff"), array("node/add/staff"));
      break;

    case "volunteers_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("application"), array(
        "node/add/application",
        "list-kids-mentored"
      ));
      break;

    case "partners_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("partner"), array("node/add/partner"));
      break;

    case "users_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array(), array("admin/people/create"), TRUE);
      break;

    case "reports_menu_active":
      $set_breadcrumb = TRUE;
      $rule_matches = novo_master_menu_position_rule_rules($context, [], [
        "canvassing-report",
        "roster-report"
      ], TRUE);
      break;
  }
}

/**
 * Menu position rules helper.
 */
function novo_master_menu_position_rule_rules($context, $content_types, $paths, $is_user = FALSE) {
  return (
    (isset($context['node']->type) && in_array($context['node']->type, $content_types)) ||
    (isset($context['path']) && in_array($context['path'], $paths)) ||
    ($is_user && isset($context['user']->uid))
  ) ? TRUE : FALSE;
}

/**
 * Validate app user.
 */
function novo_master_dob_validate($element, &$form_state) {
  $dob = isset($element['#value']) ? $element['#value'] : NULL;

  $date = isset($dob['value']['date']) ? $dob['value']['date'] : NULL;
  if (!empty($date)) {
    $date_time = strtotime($date);
    if ($date_time > REQUEST_TIME) {
      form_set_error($element['#field_name'], t("Date of birth can't be in feature"));
    }
  }
}

/**
 * Implements hook_custom_theme().
 */
function novo_master_custom_theme() {
  if (current_path() == 'system/ajax') {
    return variable_get('admin_theme');
  }
}

/**
 * Implements hook_entity_print_pdf_alter().
 */
function novo_master_entity_print_pdf_alter(WkHtmlToPdf $pdf, $entity_type, $entity) {
  // @codingStandardsIgnoreStart
//  kpr($entity_type);
//  kpr($entity);
//  kpr($pdf);

//  if (isset($entity->type) && $entity->type == "reference_request") {
//    $pdf->setOptions(array(
//      'title' => 'svip',
//    ));
//  }

//  $pdf->setOptions(array(
//    'page-size' => 'A5',
//  ));
  // @codingStandardsIgnoreEnd
}

/**
 * Implements hook_permission().
 */
function novo_master_permission() {
  return array(
    'novo master userprotect check bypass' => array(
      'title' => t('Novo Bypass access to edit protected users.'),
      'description' => t('Allow edit users even if set protect users.'),
    ),
  );
}

/**
 * User protect check by pass.
 */
function novo_master_userprotect_check_bypass_alter(&$access, $account) {
  $access = (user_access("novo master userprotect check bypass")) ? TRUE : FALSE;
}
