<?php

/**
 * @file
 * Helper functions.
 */

define("NOVO_MASTER_NOT_VIEW_DISPLAY_CONTENT_TYPES", serialize(array(
  'program',
  'kids',
  'attendance',
  'locations',
  'mentors',
  'partner',
  'staff',
  'class'
)));

define("NOVO_MASTER_ADD_BUTTON_VIEW_NAMES", serialize(array(
  'kids',
  'attendance',
  'locations',
  'partners',
  'programs',
  'staff',
  'volunteers',
  'mentors',
  'class'
)));

/**
 * Preprocess page.
 */
function novo_master_preprocess_page() {

}

/**
 * Implements hook_form_alter().
 */
function novo_master_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['actions']['publish']['#value'])) {
    if ($form['actions']['publish']['#value'] == "Publish") {
      $form['actions']['publish']['#value'] = t("Active");
    }
    else {
      $form['actions']['publish']['#value'] = t("Not active");
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function novo_master_menu_alter(&$items) {
  $items['node/%node/view']['access callback'] = 'novo_master_disable_node_view';
  $items['node/%node/view']['access arguments'] = array(1);

  $items['node/add']['access callback'] = 'novo_master_disable_node_add_page';
}

/**
 * Access node view tab callback.
 */
function novo_master_disable_node_view($node) {
  $now_view_content_types = unserialize(NOVO_MASTER_NOT_VIEW_DISPLAY_CONTENT_TYPES);
  if (in_array($node->type, $now_view_content_types)) {
    return FALSE;
  }

  if ($node->type == 'reference_request' && function_exists("novo_ref_request_check_hash_access")) {
    return novo_ref_request_check_hash_access($node);
  }

  return user_access('access content');
}

/**
 * Access to node/add page.
 */
function novo_master_disable_node_add_page() {
  global $user;

  return ($user->uid == 1) ? TRUE : FALSE;
}

/**
 * Implements hook_preprocess_node().
 */
function novo_master_preprocess_node($variables) {
  $now_view_content_types = unserialize(NOVO_MASTER_NOT_VIEW_DISPLAY_CONTENT_TYPES);
  if (in_array($variables['type'], $now_view_content_types)) {
    if (
      isset($variables['node']) &&
      isset($variables['view_mode']) &&
      $variables['view_mode'] == "full" &&
      node_access("update", $variables['node'])
    ) {
      drupal_goto("node/" . $variables['nid'] . "/edit");
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function novo_master_preprocess_views_view(&$vars) {
  // Add "Add +" buttons to views.
  $view_names = unserialize(NOVO_MASTER_ADD_BUTTON_VIEW_NAMES);
  if (isset($vars['name']) && isset($vars['display_id']) && in_array($vars['name'], $view_names) && $vars['display_id'] == 'page') {
    $type = (isset($vars['view']->filter['type']->value)) ? $vars['view']->filter['type']->value : array();
    $type = reset($type);
    if (!empty($type)) {
      $icon = '<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>';
      if ($vars['name'] == "volunteers") {
        $add_link = "admin/people/create";
        $destination = array("destination" => "users");
      }
      else {
        $add_link = "node/add/" . $type;
        $destination = drupal_get_destination();
      }

      $btn = l(t("Add !icon", array("!icon" => $icon)), $add_link, array(
        "query" => $destination,
        "html" => TRUE,
        "attributes" => array(
          "class" => array(
            "btn",
            "btn-primary",
            "btn-sm",
            "novo-entity-add-btn"
          )
        )
      ));

      $vars['attachment_before'] .= $btn;
      $vars['attachment_after'] .= $btn;
    }
  }
}

/**
 * Implements hook_ddf_handle_args_alter().
 */
function novo_master_ddf_handle_args_alter(&$value, &$column, $field) {
  if ($field['field_name'] == "field_attendance_year" || $field['field_name'] == "field_program_school_year") {
    if (is_array($value['value'])) {
      $value = $value['value'];
      $column = "year";
    }
    else {
      // Original node has string value.
      $d = DateTime::createFromFormat("Y-m-d H:i:s", $value['value']);
      if ($d && $d->format("Y-m-d H:i:s") == $value['value']) {
        $value['value'] = date("Y", strtotime($value['value']));
      }
    }
  }
}

/**
 * Implements hook_menu_position_rule_alter().
 */
function novo_master_menu_position_rule_alter(&$rule, array &$context, &$rule_matches, &$set_breadcrumb) {
  switch ($rule->machine_name) {
    case "programms_menu_active":
      $content_types = array(
        "attendance",
        "program",
        "class",
        "mentors",
        "locations"
      );
      $paths = array(
        "node/add/attendance",
        "node/add/program",
        "node/add/class",
        "node/add/mentors",
        "node/add/locations",
        "locations",
        "programs",
        "attendance",
        "mentors",
        "class",
      );

      $rule_matches = novo_master_menu_position_rule_rules($context, $content_types, $paths);
      break;

    case "attendance_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("attendance"), array("node/add/attendance"));
      break;

    case "program_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("program"), array("node/add/program"));
      break;

    case "class_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("class"), array("node/add/class"));
      break;

    case "mentors_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("mentors"), array("node/add/mentors"));
      break;

    case "locations_menu_active":
      $rule_matches = novo_master_menu_position_rule_rules($context, array("locations"), array("node/add/locations"));
      break;

  }
}

/**
 * Menu position rules helper.
 */
function novo_master_menu_position_rule_rules($context, $content_types, $paths) {
  return (
    (isset($context['node']->type) && in_array($context['node']->type, $content_types)) ||
    (isset($context['path']) && in_array($context['path'], $paths))
  ) ? TRUE : FALSE;
}
