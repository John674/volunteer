<?php

/**
 * @file
 * Helper functions.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function novo_program_form_program_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'][] = drupal_get_path("module", "novo_program") . "/js/novo_program.js";
  $form['field_program_class_name'][$form['field_program_class_name']['#language']]['#suffix'] = t("If no options add !link first", ["!link" => l(t("Class"), "node/add/class", ['query' => drupal_get_destination()])]);

  // Pickup contacts modal form theming.
  $kids_list = &$form['field_program_kids_list'][$form['field_program_class_name']['#language']];

  for ($i = 0; $i < $kids_list['#max_delta']; $i++) {
    $pc = &$kids_list[$i]['field_p_kids_pickup_contacts'][$kids_list[$i]['field_p_kids_pickup_contacts']['#language']];
    for ($j = 0; $j <= $pc['#max_delta']; $j++) {
      $pc[$j]['#prefix'] = '<div class="field-p-kids-pickup-contacts-wrapper">';
      $pc[$j]['#suffix'] = '</div>';
      $pc[$j]['field_pc_phone'][$pc[$j]['field_pc_phone']['#language']][0]['value']['#attributes']['class'][] = "form-control";
    }

    $kids_list[$i]['field_p_kids_pickup_contacts']['#prefix'] = '<a href="#field-p-kids-pc-' . $i . '" class="btn btn-primary" data-toggle="modal"> <i class="glyphicon glyphicon-pencil" aria-hidden="true"></i> </a>';
    $kids_list[$i]['field_p_kids_pickup_contacts']['#prefix'] .= '
    <div class="modal fade" id="field-p-kids-pc-' . $i . '" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document"><div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="' . t("Close") . '">
          <span aria-hidden="true">Ã—</span>
        </button>
        <h4 class="modal-title" id="myModalLabel">' . t("Pickup Contacts") . '</h4>
      </div>
      <div class="modal-body">';

    $kids_list[$i]['field_p_kids_pickup_contacts']['#suffix'] = '</div>';
    $kids_list[$i]['field_p_kids_pickup_contacts']['#suffix'] .= '
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-dismiss="modal">' . t("Ok") . '</button>
      </div>
      </div></div></div>';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function novo_program_preprocess_field($variables) {

}

/**
 * Implements hook_menu().
 */
function novo_program_menu() {
  $items = [];

  $items['novo-program/get-kid-data/%'] = [
    'title' => 'Get kid data',
    'page callback' => 'novo_program_get_kid_data',
    'page arguments' => [2],
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Get kid's data.
 */
function novo_program_get_kid_data($nid) {
  if (function_exists("_entityreference_autocomplete_validate") && preg_match(ENTITYREFERENCE_FIND_ID_REGEX, rtrim($nid), $matches)) {
    $nid = !empty($matches[ENTITYREFERENCE_ID_MATCH_INDEX]) ? $matches[ENTITYREFERENCE_ID_MATCH_INDEX] : '';
  }

  $node = node_load($nid);

  $output = '';
  $output_data = [];

  $dob_items = field_get_items("node", $node, "field_dob");
  if (isset($dob_items[0])) {
    $display = ['label' => 'hidden', 'type' => 'only_age'];
    $age = render(field_view_value("node", $node, "field_dob", $dob_items[0], $display));
    $output_data[] = '<span class="novo-program-kid-data-age">' . $age . ' </span>';
  }
  else {
    $output_data[] = '<span class="novo-program-kid-data-age"> - </span>';
  }

  $dob_items = field_get_items("node", $node, "field_grade");
  if (isset($dob_items[0])) {
    $display = [
      'label' => 'hidden',
      'type' => 'taxonomy_term_reference_plain',
    ];
    $grade = render(field_view_value("node", $node, "field_grade", $dob_items[0], $display));
    $output_data[] = '<span class="novo-program-kid-data-grage">' . $grade . ' </span>';
  }
  else {
    $output_data[] = '<span class="novo-program-kid-data-grage"> - </span>';
  }

  if (!empty($output_data)) {
    $output .= '<span class="novo-program-kid-data">' . implode(" ", $output_data) . ' </span>';
  }

  drupal_json_output($output);
}

/**
 * Implements hook_node_presave().
 */
function novo_program_node_presave($node) {
  if ($node->type == "class") {
    // Update programm name in class was updated.
    $query = db_select("field_data_field_program_class_name", "cn");
    $query->fields("cn", ["entity_id"]);
    $query->condition("cn.bundle", "program");
    $query->condition("cn.field_program_class_name_target_id", $node->nid);
    $nids = $query->execute()->fetchAllKeyed(0, 0);
    if (!empty($nids)) {
      $nodes = node_load_multiple($nids);
      foreach ($nodes as $node) {
        $node->title = "%AutoEntityLabel%";
        node_save($node);
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function novo_program_views_query_alter(&$view, &$query) {
  // Not show classes used in other programs.
  if ($view->name == 'programm_class_list') {
    $nid = NULL;

    // Default node edit page.
    if (arg(0) == "node" && arg(2) == "edit") {
      $nid = arg(1);
    }

    // DDF update.
    if (arg(0) == "ddf" && arg(1) == "update" && is_numeric(arg(5))) {
      $nid = arg(5);
    }

    $condition = db_or()
      ->isNull('field_program_class_name_node.nid')
      ->condition('field_program_class_name_node.nid', $nid, '=');
    $query->add_where(0, $condition);
  }
}
