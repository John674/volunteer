<?php

/**
 * @file
 * Ref request functions.
 */

define("NOVO_REF_REQUEST_SALT", "dbNovoS");
define('NOVO_REF_QUESTIONS_VOC', 'reference_request_questions');
define('NOVO_REF_QUESTIONS_REF1_TERM_NAME', 'Reference 1');
define('NOVO_REF_QUESTIONS_REF2_TERM_NAME', 'Reference 2');
define('NOVO_REF_QUESTIONS_REF_STAND_BY_TERM_NAME', 'Standby');
define('NOVO_REF_QUESTIONS_REF_PARENTS_TERM_NAME', 'Parents');
define('NOVO_REF_QUESTIONS_REF_CHURCH_TERM_NAME', 'Church');

define('NOVO_REF_REQUEST_TASK_STATUSES', serialize(array(
  0 => t("Not sent"),
  1 => t("Not responded"),
  2 => t("Responded"),
  3 => t("Expired"),
  4 => t("Canceled"),
)));

module_load_include("inc", "novo_ref_request", "includes/novo_ref_request.db");
module_load_include("inc", "novo_ref_request", "includes/novo_ref_request.func");

/**
 * Implements hook_node_access().
 */
function novo_ref_request_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == "reference_request" && $op == 'update') {
    return (novo_ref_request_check_hash_access($node)) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Access to ref nodes vial hash link.
 */
function novo_ref_request_check_hash_access($node) {
  $op = arg(2);
  $hash = arg(3);
  $access_key = crypt($node->nid, NOVO_REF_REQUEST_SALT);

  if (!empty($hash) && $op == 'view' && hash_equals($access_key, $hash)) {
    return TRUE;
  }

  return user_access("access content");
}

/**
 * Generate Link for Ref with hash.
 */
function novo_ref_request_generate_hashed_link($nid) {
  $access_key = crypt($nid, NOVO_REF_REQUEST_SALT);
  $link = url("node/" . $nid . "/view/" . $access_key, array("absolute" => TRUE));
  return $link;
}

/**
 * Implements hook_preprocess_node().
 */
function novo_ref_request_preprocess_node(&$variables) {
  if (isset($variables['type']) && $variables['type'] == "reference_request" && $variables['view_mode'] == "full") {
    $save_form = drupal_get_form("novo_ref_request_save_form", $variables['nid']);
    $variables['content']['save_form'] = $save_form;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function novo_ref_request_preprocess_page(&$variables) {
  $node = isset($variables['node']) ? $variables['node'] : NULL;
  if ($node && $node->type == "reference_request") {
    drupal_set_title(t("Reference form"));
  }
}

/**
 * Ref save form().
 */
function novo_ref_request_save_form($form, &$form_state, $nid) {
  $form['#weight'] = 20;
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Send")
  );

  return $form;
}

/**
 * Ref save form submit().
 */
function novo_ref_request_save_form_submit($form, &$form_state) {
  $nid = (isset($form_state['values']['nid'])) ? $form_state['values']['nid'] : NULL;
  $node = node_load($nid);

  if ($node) {
    $land = isset($node->language) ? $node->language : LANGUAGE_NONE;
    $responded = isset($node->field_responded[$land][0]['value']) ? $node->field_responded[$land][0]['value'] : FALSE;
    if (!$responded) {
      $node->field_responded[$land][0]['value'] = 1;
      novo_ref_request_task_update_status($node->nid, 2);
      node_save($node);
    }
  }

  drupal_set_message(t("Your answers have been saved."));
}

/**
 * Implements hook_node_presave().
 */
function novo_ref_request_node_presave($node) {
  if ($node->type == "application") {

    $lang = isset($node->language) ? $node->language : LANGUAGE_NONE;
    $node_original_completed = isset($node->original->field_completed[$lang][0]['value']) ? $node->original->field_completed[$lang][0]['value'] : FALSE;
    $node_completed = isset($node->field_completed[$lang][0]['value']) ? $node->field_completed[$lang][0]['value'] : FALSE;

    if (!$node_original_completed && $node_completed) {
      // Create and attach ref request nodes.
      $ref_nids = array();
      $ref_nids[] = novo_ref_request_attach_ref($node, "field_reference_request_1", NOVO_REF_QUESTIONS_REF1_TERM_NAME);
      $ref_nids[] = novo_ref_request_attach_ref($node, "field_reference_request_2", NOVO_REF_QUESTIONS_REF2_TERM_NAME);
      $ref_nids[] = novo_ref_request_attach_ref($node, "field_reference_request_standby", NOVO_REF_QUESTIONS_REF_STAND_BY_TERM_NAME);
      $ref_nids[] = novo_ref_request_attach_ref($node, "field_reference_request_church", NOVO_REF_QUESTIONS_REF_CHURCH_TERM_NAME);
      $ref_nids[] = novo_ref_request_attach_ref($node, "field_reference_request_parents", NOVO_REF_QUESTIONS_REF_PARENTS_TERM_NAME);
      drupal_register_shutdown_function('novo_ref_request_add_tasks_callback', $ref_nids);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function novo_ref_request_node_delete($node) {
  if ($node->type == "reference_request") {
    // Remove tasks when node removed.
    novo_ref_request_task_delete($node->nid);
  }
}

/**
 * Implements hook_preprocess_field().
 */
function novo_ref_request_preprocess_field(&$variables) {
  $node = isset($variables['element']['#object']) ? $variables['element']['#object'] : NULL;

  if (isset($node->type) && $node->type == 'application') {
    switch ($variables['element']['#field_name']) {
      case 'field_reference_request_1':
      case 'field_reference_request_2':
        novo_ref_request_prepare_fields($variables, "Reference request");
        break;

      case 'field_reference_request_standby':
        novo_ref_request_prepare_fields($variables, "Standby reference request");
        break;

      case 'field_reference_request_parents':
        novo_ref_request_prepare_fields($variables, "Parent reference");
        break;

      case 'field_reference_request_church':
        novo_ref_request_prepare_fields($variables, "Church reference request");
        break;
    }
  }
}

/**
 * Prepare fields.
 */
function novo_ref_request_prepare_fields(&$variables, $title = "") {

  $entity = isset($variables['items'][0]['#item']['entity']) ? $variables['items'][0]['#item']['entity'] : NULL;
  if (!empty($entity->nid)) {
    $statuses = unserialize(NOVO_REF_REQUEST_TASK_STATUSES);
    $ref_task = novo_ref_request_task_get_last($entity->nid);
    $status = (isset($ref_task->status) && isset($statuses[$ref_task->status]))  ? $ref_task->status : 0;
    $status_label = $statuses[$status];

    $ref_name = novo_ref_get_ref_name($entity->nid);
    $label = t(":title :name", array(":title" => $title, ":name" => $ref_name));

    $variables['ref_data'] = array(
      'pdf_link' => l('<i class="glyphicon glyphicon-file"></i> ' . t('Pdf'), "entityprint/node/" . $entity->nid, array(
        'html' => TRUE,
        'attributes' => array(
          'target' => '_blank',
          'class' => array("btn", "btn-default", "btn-xs")
        )
      )),
      'edit_link' => l('<i class="glyphicon glyphicon-edit"></i> ' . t('Edit'), "node/" . $entity->nid . "/view", array(
        'query' => drupal_get_destination(),
        'html' => TRUE,
        'attributes' => array(
          'class' => array("btn", "btn-default", "btn-xs")
        )
      )),
      'resend_link' => l('<i class="glyphicon glyphicon-envelope"></i> ' . t('Resend'), "node/" . $entity->nid, array(
        'query' => drupal_get_destination(),
        'html' => TRUE,
        'attributes' => array(
          'class' => array("btn", "btn-default", "btn-xs")
        )
      )),
      'send_link' => l('<i class="glyphicon glyphicon-envelope"></i> ' . t('Send to referer'), "node/" . $entity->nid, array(
        'query' => drupal_get_destination(),
        'html' => TRUE,
        'attributes' => array(
          'class' => array("btn", "btn-default", "btn-xs")
        )
      )),
      'status' => $status,
      'status_label' => $status_label,
      'title' => $label
    );
  }
}
