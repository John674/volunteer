<?php

/**
 * @file
 * Helper functions.
 */

module_load_include("inc", "novo_reports", "includes/novo_reports.func");
module_load_include("inc", "novo_reports", "includes/novo_reports.handlers_func");
module_load_include("inc", "novo_reports", "includes/novo_reports.preprocess");
module_load_include("inc", "novo_reports", "includes/novo_reports.enrollments");
module_load_include("inc", "novo_reports", "includes/novo_reports.general_report");

/**
 * Implements hook_menu().
 */
function novo_reports_menu() {
  $items = [];

  $items['novo-reports'] = [
    'title' => 'Reports',
    'access arguments' => ['novo reports access'],
    'page callback' => 'novo_reports_list',
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['enrollment-report'] = [
    'title' => 'Enrollment report',
    'access callback' => 'novo_reports_reports_access',
    'page callback' => 'novo_reports_enrollment_report',
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['general-report'] = [
    'title' => 'General report',
    'access callback' => 'novo_reports_reports_access',
    'page callback' => 'novo_reports_general_report',
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function novo_reports_theme() {
  return [
    'novo_reports_nametag_kid' => [
      'variables' => ['data' => NULL],
      'template' => 'templates/novo-reports-nametag-kid',
    ],
  ];
}

/**
 * Implements hook_permission().
 */
function novo_reports_permission() {
  return [
    'novo reports access' => [
      'title' => t('Novo access to reports.'),
      'description' => t('Novo access to reports.'),
    ],
  ];
}

/**
 * Implements hook_views_api().
 */
function novo_reports_views_api() {
  return [
    'api' => 3,
    'path' => drupal_get_path('module', 'novo_reports') . '/views',
  ];
}

/**
 * Implements hook_views_pre_render().
 */
function novo_reports_views_pre_render(&$view) {
  if (isset($view->live_preview) && $view->live_preview) {
    return TRUE;
  }

  if ($view->name == 'children_allergy_report') {
    // Pure distinct
    $tmp_result = [];
    foreach ($view->result as $key => $row) {
      if (!isset($tmp_result[$row->node_field_data_field_p_kid_name_nid])) {
        $tmp_result[$row->node_field_data_field_p_kid_name_nid] = $row;
      }
    }

    $view->result = $tmp_result;
  }

  if ($view->name == 'enrollment_report') {
    $tmp_result = [];
    foreach ($view->result as $key => $row) {
      $tmp_result[$row->field_data_field_program_location_field_program_location_tar][] = $row;
    }

    foreach ($tmp_result as $loc_id => $rows) {
      $count = 0;
      foreach ($rows as $key => $row) {
        $count += $row->field_data_field_program_kids_list_field_program_kids_list_v;
      }
      $total_row = clone $row;
      $total_row->nid = "total-label";
      $total_row->node_title = t("Total");
      $total_row->field_data_field_program_kids_list_field_program_kids_list_v = $count;
      $tmp_result[$loc_id][] = $total_row;
    }

    $new_result = [];
    foreach ($tmp_result as $loc_id => $rows) {
      foreach ($rows as $key => $row) {
        $new_result[] = $row;
      }
    }

    $view->result = $new_result;
  }
}

/**
 * Implements hook_preprocess_views_data_export_pdf_header().
 */
function novo_reports_preprocess_views_data_export_pdf_header(&$vars) {
  if ($vars['view']->name == "report_nametag") {
    $vars['header_row'] = "";
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function novo_reports_preprocess_views_view_table(&$vars) {
  switch ($vars['view']->name) {
    case "roster_report":
      foreach ($vars['rows'] as $row_id => &$row) {
        if (isset($row['views_conditional_2']) && !empty($row['views_conditional_2'])) {
          $color = novo_reports_get_group_color_value($vars['result'][$row_id], "field_p_canvassing_group");

          if (!empty($color)) {
            $row['views_conditional_2'] = '<div style="background: ' . $color . '">' . $row['views_conditional_2'] . '</div>';
          }
        }
      }
      break;
  }

}

/**
 * Implements hook_preprocess_views_view_field().
 */
function novo_reports_preprocess_views_view_field(&$vars) {
  if ($vars['view']->name == "roster_report" && $vars['field']->field == "field_p_canvassing_group") {

    $field_field = "field_" . $vars['field']->field;
    $color = novo_reports_get_group_color_value($vars['row'], $vars['field']->field);

    $vars['row']->{$field_field}[0]['rendered'] = [
      "#markup" => $color,
    ];

    $vars['output'] = $color;
  }
}

/**
 * Implements hook_preprocess_views_data_export_pdf_body().
 */
function novo_reports_preprocess_views_data_export_pdf_body(&$vars) {

  $colored_fields = [
    "field_p_small_group",
    "field_p_canvassing_group",
  ];

  foreach ($colored_fields as $field) {
    foreach ($vars['themed_rows'] as $row_id => &$row) {
      if (isset($row[$field]) && !is_array($row[$field])) {

        $raw_row = (isset($vars['rows'][$row_id])) ? $vars['rows'][$row_id] : NULL;
        $color = novo_reports_get_group_color_value($raw_row, $field);
        $row[$field] = [
          "data" => strip_tags($row[$field]),
          "style" => "background:$color;",
        ];
      }
    }
  }

  switch ($vars['view']->name) {
    case "roster_report":
      novo_reports_preprocess_body_roster_report($vars);
      break;

    case "canvassing_report":
      novo_reports_preprocess_body_canvassing_report($vars);
      break;

    case "report_nametag":
      novo_reports_preprocess_body_report_nametag($vars);
      break;

  }
}

/**
 * Preprocess views_data_export_pdf_theader.
 */
function novo_reports_preprocess_views_data_export_pdf_theader(&$vars) {
  switch ($vars['view']->name) {
    case "canvassing_report":
      novo_reports_preprocess_theader_canvassing_report($vars);
      break;
  }
}

/**
 * Render field for reports.
 */
function novo_reports_render_field_for_report($row, $field) {
  return isset($row->{$field}[0]['rendered']) ? drupal_render($row->{$field}[0]['rendered']) : '';
}

/**
 * Render field for reports.
 */
function novo_reports_render_field_for_report_color($row, $field) {
  $color = novo_reports_get_group_color_value($row, $field);

  return isset($row->{"field_" . $field}[0]['raw']['entity']->name) ? '<div style="color:' . $color . '">' . $row->{"field_" . $field}[0]['raw']['entity']->name . '</div>' : '';
}

/**
 * Implements hook_views_data_export_wkhtmltopdf_options_alter().
 */
function novo_reports_views_data_export_wkhtmltopdf_options_alter(&$options, $plugin) {
  if (isset($plugin->view->name) && $plugin->view->name == "report_nametag") {
    $options[] = "disable-smart-shrinking";
  }
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function novo_reports_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if ($vbo->view->name == "report_nametag") {
    // Theme VBO button and add clone btn to footer of view.
    $form['select']['#attributes']['class'][] = 'novo-report--nametag-vbo-operation-wrapper';
    $form['select']['action::views_bulk_operations_argument_selector_action']['#value'] = '<i class="fa fa-print" aria-hidden="true"></i> ' . $form['select']['action::views_bulk_operations_argument_selector_action']['#value'];
    $form['select2'] = $form['select'];
    $form['select2']['#weight'] = 100;
  }
}

/**
 * Enrollment report access callback.
 */
function novo_reports_reports_access() {
  $role = user_role_load_by_name('Siteadmin');
  return (user_has_role($role->rid)) ? TRUE : FALSE;
}
