Index: docroot/sites/all/libraries/mpdf/mpdf.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docroot/sites/all/libraries/mpdf/mpdf.php	(date 1511269894000)
+++ docroot/sites/all/libraries/mpdf/mpdf.php	(revision )
@@ -30553,6 +30553,7 @@
 
 	function ConvertSize($size = 5, $maxsize = 0, $fontsize = false, $usefontsize = true)
 	{
+    $scale = 72 / 25.4;
 		// usefontsize - set false for e.g. margins - will ignore fontsize for % values
 		// Depends of maxsize value to make % work properly. Usually maxsize == pagewidth
 		// For text $maxsize = Fontsize
@@ -30560,96 +30561,94 @@
 		// Returns values using 'mm' units
 		$size = trim(strtolower($size));
 
-		if ($size == 'thin')
-			$size = 1 * (25.4 / $this->dpi); //1 pixel width for table borders
-		elseif (stristr($size, 'px'))
-			$size *= (25.4 / $this->dpi); //pixels
-		elseif (stristr($size, 'cm'))
-			$size *= 10; //centimeters
-		elseif (stristr($size, 'mm'))
-			$size += 0; //millimeters
-		elseif (stristr($size, 'pt'))
-			$size *= 25.4 / 72; //72 pts/inch
-		elseif (stristr($size, 'rem')) {
-			$size += 0; //make "0.83rem" become simply "0.83"
-			$size *= ($this->default_font_size / _MPDFK);
-		} elseif (stristr($size, 'em')) {
-			$size += 0; //make "0.83em" become simply "0.83"
-			if ($fontsize) {
-				$size *= $fontsize;
-			} else {
-				$size *= $maxsize;
-			}
-		} elseif (stristr($size, '%')) {
-			$size += 0; //make "90%" become simply "90"
-			if ($fontsize && $usefontsize) {
-				$size *= $fontsize / 100;
-			} else {
-				$size *= $maxsize / 100;
-			}
-		} elseif (stristr($size, 'in'))
-			$size *= 25.4; //inches
-		elseif (stristr($size, 'pc'))
-			$size *= 38.1 / 9; //PostScript picas
-		elseif (stristr($size, 'ex')) { // Approximates "ex" as half of font height
-			$size += 0; //make "3.5ex" become simply "3.5"
-			if ($fontsize) {
-				$size *= $fontsize / 2;
-			} else {
-				$size *= $maxsize / 2;
-			}
-		} elseif ($size == 'medium')
-			$size = 3 * (25.4 / $this->dpi); //3 pixel width for table borders
-		elseif ($size == 'thick')
-			$size = 5 * (25.4 / $this->dpi); //5 pixel width for table borders
-		elseif ($size == 'xx-small') {
-			if ($fontsize) {
-				$size *= $fontsize * 0.7;
-			} else {
-				$size *= $maxsize * 0.7;
-			}
-		} elseif ($size == 'x-small') {
-			if ($fontsize) {
-				$size *= $fontsize * 0.77;
-			} else {
-				$size *= $maxsize * 0.77;
-			}
-		} elseif ($size == 'small') {
-			if ($fontsize) {
-				$size *= $fontsize * 0.86;
-			} else {
-				$size *= $maxsize * 0.86;
-			}
-		} elseif ($size == 'medium') {
-			if ($fontsize) {
-				$size *= $fontsize;
-			} else {
-				$size *= $maxsize;
-			}
-		} elseif ($size == 'large') {
-			if ($fontsize) {
-				$size *= $fontsize * 1.2;
-			} else {
-				$size *= $maxsize * 1.2;
-			}
-		} elseif ($size == 'x-large') {
-			if ($fontsize) {
-				$size *= $fontsize * 1.5;
-			} else {
-				$size *= $maxsize * 1.5;
-			}
-		} elseif ($size == 'xx-large') {
-			if ($fontsize) {
-				$size *= $fontsize * 2;
-			} else {
-				$size *= $maxsize * 2;
-			}
-		} else
-			$size *= (25.4 / $this->dpi); //nothing == px
+    $res = preg_match('/^(?P<size>[-0-9.,]+)?(?P<unit>[%a-z-]+)?$/', $size, $parts);
+    if (!$res) {
+      throw new MpdfException(sprintf('Invalid size representation "%s"', $size));
+    }
+    $unit = !empty($parts['unit']) ? $parts['unit'] : null;
+    $size = !empty($parts['size']) ? (float) $parts['size'] : 0.0;
+    switch ($unit) {
+      case 'mm':
+        // do nothing
+        break;
+      case 'cm':
+        $size *= 10;
+        break;
+      case 'pt':
+        $size *= 1 / $scale;
+        break;
+      case 'rem':
+        $size *= ($this->default_font_size / (1 / $scale));
+        break;
+      case '%':
+        if ($fontsize && $usefontsize) {
+          $size *= $fontsize / 100;
+        } else {
+          $size *= $maxsize / 100;
+        }
+        break;
+      case 'in':
+        // mm in an inch
+        $size *= 25.4;
+        break;
+      case 'pc':
+        // PostScript picas
+        $size *= 38.1 / 9;
+        break;
+      case 'ex':
+        // Approximates "ex" as half of font height
+        $size *= $this->MultiplyFontSize($fontsize, $maxsize, 0.5);
+        break;
+      case 'em':
+        $size *= $this->MultiplyFontSize($fontsize, $maxsize, 1);
+        break;
+      case 'thin':
+        $size = 1 * (25.4 / $this->dpi);
+        break;
+      case 'medium':
+        $size = 3 * (25.4 / $this->dpi);
+        // Commented-out dead code from legacy method
+        // $size *= multiplyFontSize($fontsize, $maxsize, 1);
+        break;
+      case 'thick':
+        $size = 5 * (25.4 / $this->dpi); // 5 pixel width for table borders
+        break;
+      case 'xx-small':
+        $size *= $this->MultiplyFontSize($fontsize, $maxsize, 0.7);
+        break;
+      case 'x-small':
+        $size *= $this->MultiplyFontSize($fontsize, $maxsize, 0.77);
+        break;
+      case 'small':
+        $size *= $this->MultiplyFontSize($fontsize, $maxsize, 0.86);
+        break;
+      case 'large':
+        $size *= $this->MultiplyFontSize($fontsize, $maxsize, 1.2);
+        break;
+      case 'x-large':
+        $size *= $this->MultiplyFontSize($fontsize, $maxsize, 1.5);
+        break;
+      case 'xx-large':
+        $size *= $this->MultiplyFontSize($fontsize, $maxsize, 2);
+        break;
+      case 'px':
+      default:
+        $size *= (25.4 / $this->dpi);
+        break;
+    }
 
 		return $size;
 	}
 
+  function MultiplyFontSize($fontsize, $maxsize, $ratio)
+  {
+    if ($fontsize) {
+      return $fontsize * $ratio;
+    }
+
+    return $maxsize * $ratio;
+  }
+
 	// mPDF 5.7.3 TRANSFORMS
 	function ConvertAngle($s, $makepositive = true)
 	{
